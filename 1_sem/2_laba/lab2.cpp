/**
 * Практическое занятие №2. Побитовые операторы. Директивы препроцессора.
 * Указатели.
 */

#include <iostream>
#include <cmath>
 
int main()
{
    #ifdef NDEBUG
        #include "2.h"
        std::cout << "Release version" << std::endl;
    #else
        #include "1.h"
        std::cout << "Debug version" << std::endl;
        std::cout << "Time of build: " <<__TIME__ << " " << __DATE__ << std::endl;
        std::cout << "Name of file: " << __FILE__ << std::endl;
        std::cout << "Name of function: " << __func__ << std::endl;
        std::cout << "Number of line: " << __LINE__ << std::endl;
    #endif

    /**
     * Задание 1. Побитовая арифметика (and, or, xor, not), сдвиги.
     */

    /**
     * Задание 1.1.
     * 
     * Задайте значение переменной `y`, например, с помощью потока ввода.
     *
     * 1. С помощью побитовых операторов и операторов сдвига выведите значение
     *    переменной `y` на консоль в двоичном виде.
     * 2. Сделайте то же, но пропустив незначащие нули.
     *
     * Например, если `y == 9`, то должно получиться
     * 1. `0 0 0 0 ... 0 0 1 0 0 1` (количество двоичных цифр зависит от
     *    платформы).
     * 2. `1 0 0 1`.
     *
     * Что выведет ваша программа, если ввести отрицательное число? Объясните
     * этот результат.
     */

    {
        int y, flag = 0;
        std::cin >> y;
        std::cout<< std::endl;
        std::cout<<"1. `";
        for(int i=31; i>=0; i--) {
            std::cout<< ((y>>i)&1) << " ";  
        }
        
        /*std::cout<<"`" << std::endl << "2. `";   //старый
        if (y==0){std::cout<<"0";}
        else{
            for(int i=31; i>=0; i--) {
                if ((y>>i)&1){flag = 1;} //пропускает первые нули
                
                if (flag){
                    std::cout<< ((y>>i)&1) << " ";
                }    
            }
            std::cout<<"`";
        }*/
        std::cout<<"`" << std::endl << "2. `";

        // __builtin_clz(y) возвращает кол-во незначащих нулей (+ если ввести 0, то все равно вернёт 31)
        for(int i= 31 - __builtin_clz(y); i>=0; i--) {
            std::cout<< ((y>>i)&1) << " ";
        }

    }

    std::cout<<std::endl;
    /**
     * Задание 1.2.
     *
     * Дана целая переменная `y`, задайте ее значение, например, с помощью
     * потока ввода.
     *
     * В рамках одного цикла "сдвиньте" все единицы в переменной `y` вправо,
     * обновив тем самым значение этой переменной.
     *
     * Например:
     * было:  0100 1111 0000 0000 0110 1111 0000 0010
     * стало: 0000 0000 0000 0000 0000 1111 1111 1111
     *
     * Выведите переменную на экран в двоичном виде до преобразования и после,
     * используя код из задания 1.1.
     */

    {
        int y, ynew=0;
        std::cin>>y;
        std::cout<< std::endl;

        for(int i=31; i>=0; i--) {
            std::cout<< ((y>>i)&1);  
        }
        std::cout<<std::endl;
        
        /*for(int i=31; i>=0; i--) {    //старое
            if ((y>>i)&1){
                ynew = (ynew << 1)|1;
            }
        }*/
        for(int i=31; i>=0; i--) {
            if (y&1){
                ynew = (ynew << 1)|1;
            }
            y = y>>1;
        }
        
        for(int i=31; i>=0; i--) {
            std::cout<< ((ynew>>i)&1);  
        }        
    }
    std::cout<<std::endl;

    /**
     * Задание 1.3.
     *
     * Дана целая переменная `y`, задайте ее значение.
     *
     * Напишите код, который с помощью побитовых операций:
     *
     * 1. вычислит `y * 2^n`, где целое `n` (0 <= n < 16) задается отдельно;
     * 2. проверит, делится ли `y` на 2, проверит, делится ли `y` на 4;
     * 3. вычислит целую часть логорифма `y` по основанию 2.
     */

    {
        int y, n;
        std::cout<< "Введите через пробел число у и n (0 <= n < 16): ";
        std::cin>>y >> n;
        std::cout<< std::endl;

        if (0<= n&&n < 16){
            std::cout<<"y*2^n = "<< (y << n) << std::endl; // *2^n

            if(((y&1) != 0) & ((y&3) > 0)){
                std::cout<<"Не делится на 2 и не делится на 4"<<std::endl;
            }

            if(((y&1) == 0) & ((y&3) > 0)){
                std::cout<<"Делится на 2, но не делится на 4"<<std::endl;
            }

            else{
                std::cout<<"Делится на 2 и делится на 4"<<std::endl;
            }

            if (y>0){
                for(int i=31; i>=0; i--){ //log
                    if ((y>>i)&1){
                        std::cout<<"log_2 = "<< i <<std::endl;
                        break;
                    }
                }
            }
            else{std::cout<<"y<=0, невозможно взять логарифм"<<std::endl;}
        }

        else{std::cout<<"n задано вне диапазона"<< std::endl;}
    }

    /**
     * Задание 1.4.
     *
     * Какие операции следует применить к заданному ниже операнду sNum для
     * того, чтобы переменная sRes приняла требуемое значение? Каждую побитовую
     * операцию можно использовать только 1 раз.
     *
     * Замечание: значения подобраны таким образом, что в каждом случае
     * достаточно использовать один оператор (и при необходимости маску). 
     */

    {
        short sNum = 0x8008;
        short sRes;

        /** sRes == 0x7ff7 */ //все биты инвертируются
        // sRes = ~sNum;
    
        /** sRes == 0x8ff8 */ 
        // sRes = sNum | 0x0ff0;

        /** sRes == 0x0008 */
        // sRes = sNum & 0x000f;

        /** sRes == 0x7f08 */
        // sRes = sNum - 0x0100;

        /** sRes == 0xf001 */
        // sRes = sNum >> 3;

        /** sRes == 0x0010 */
        // sRes = sNum ^ 0x8018;
    }

    
    /**
     * Задание 2. Директивы препроцессора.
     */

    /**
     * Задание 2.1. Использование "математических" макросов стандартной
     * библиотеки.
     *
     * В заголовочном файле <cmath> (который в свою очередь включает старый
     * файл math.h) определены часто используемые математические константы,
     * например M_PI. Воспользуйтесь этой константой для вычисления длины
     * окружности.
     */

    {
        float radius = 5;
        float circumference = 2 * M_PI * radius;
    }
    
    /**
     * Задание 2.2. Макросы с параметрами.
     */

    /**
     * Задание 2.2.1.
     *
     * Напишите свою макроподстановку LENGHT которая вычисляет длину
     * окружности. 
     */

    {
        /** Протестируйте написанный макрос для следующих ситуаций */
        #define LENGHT(r) (2 * M_PI * (r))
        float l1 = LENGHT(1 + 2); // должно быть 18.8495...
        float l2 = 1 / LENGHT(2); // должно быть 0.07957...
    }

    /**
     * Задание 2.2.2.
     * 
     * Определите макрос MAX(A, B) для вычисления б'ольшего значения из двух.
     */

    {
        /**
         * Используйте макрос следующим образом. Следите за изменением значений
         * переменных k, i, j. Объясните результат.
         *
         * Постарайтесь убрать побочные эффекты.
         *
         * Отметьте случаи, когда избежать побочных эффектов невозможно.
         */
        #define MAX(q, w) ((q)>(w) ? (q) : (w)) 
        int i = 10, j = 12, k;
        k = MAX(i, j);
        k = MAX(j, i) * 2;
        k = MAX(j, i+3);
        k = MAX(i--, j++);
    }

    /**
     * Задание 2.2.3. 
     *
     * Определите макрос EXCHANGE(X, Y)  для перестановки двух объектов типа
     * int в памяти местами. 
     *
     * Проверьте для приведенного фрагмента. 
     *
     * Подумайте, что будет делать макроподстановка, если переставляемые
     * значения разного типа??? ошибка
     */

    {
        #define EXCHANGE(q, w) {int vr = q; q = w; w = vr;}
        int x1=1, y1=-1;
        EXCHANGE(x1,y1);

        int x2=100, y2=-100;
        EXCHANGE(x2,y2);
    }

    /**
     * Задание 2.3. Директивы условной трансляции.
     *
     * Выполняя следующий фрагмент, посмотрите, какое значение принимает
     * переменная iNN.                   
     
     iNN = -1 т. к. ни NNN ни MMM не определены
     
     * Что нужно сделать для того, чтобы результат был равен 0? 1? 2?
     */
    // 0 если определен NNN и MMM
    // 1 если определен MMM и не определен NNN
    // 2 если определен NNN и не определен MMM
    {
        int iNN;
#if defined NNN && defined MMM
        iNN = 0;
#elif defined MMM
        iNN = 1;
#elif defined NNN 
        iNN = 2;

#else
        iNN = -1;
#endif
    }

    /**
     * Задание 2.4. Задание директив при сборке.
     *
     * При сборке программы компилятором можно установить необходимые
     * макроподстановки с помощью ключа `-D`. Например, чтобы при сборке 
     * была определена директива `A` без значения и директива `B` со значением
     * `1`, надо добавить следующие ключи к команде сборки: `-D A -D B=1`.
     * Таким образом команда сборки будет выглядеть примерно так:
     *
     * `gcc -g -D A -D B=1 lab2.cpp`
     *
     * Уберите из кода определения макросов NNN и MMM из прошлого задания и
     * приведите команды компиляции, которые заставят переменную iNN принять
     * нужное значение. 
     *
     * Проверьте их работоспособность.
     */

    /**
     * Задание 2.5. Сборки "DEBUG" и "RELEASE". Предопределенные макросы
     * компилятора.
     *
     * При отладке удобно выводить дополнительную информацию, которая может
     * мешать в итоговой (релизной) версии программы.
     *
     * Существует стандартный макрос, который принято устанавливать при
     * релизной сборке - `NDEBUG`.
     *
     * С помощью макроса NDEBUG и предопределенных макросов выведите на консоль
     * для отладочной версии информацию о том, что это отладочная сборка, о
     * дате сборки, о имени файла, имени функции и строки. Для релизной сборки
     * такая информация не должна выводиться.
     *
     * Для защиты работы соберите две версии программы: отладочную и итоговую.
     * Чтобы собрать итоговую версию в другом исполняемом файле, используйте 
     * ключ компилятора `-o`, примерно так: 
     *
     * `gcc <ваши опции> -o release.out lab2.cpp`
     */

    /**
     * Задание 3.Заголовочные файлы. Директива #include.
     */

    /**
     * Задания 3.1. 
     *
     * Создайте и подключите к проекту два заголовочных файла 1.h и 2.h.
     * 
     * В каждом заголовочном файле объявите перечисление с одинаковыми именами
     * констант, но сопоставьте именованным константам разные значения,
     * например:
     *
     * - 1.h - enum MyEnum{My1, My2, My3};  
     * - 2.h - enum MyEnum{My1=5, My2, My3};
     *
     * С помощью директив условной трансляции в DEBUG-версии пользуйтесь
     * значениями констант из 1.h, а в RELEASE-версии значениями констант из
     * 2.h.
     *
     * Замечание: заголовочные файлы принято подключать в верхней части файла,
     * до любых функций (хотя правила компиляции не запрещают подключить их
     * тут).
     */
    //int asd = My1 + My2; //для проверки

    /**
     * Задание 4. Указатели. 
     */

    /**
     * Задание 4.1. 
     * 
     * Объявите объекты разных типов и проинициализируйте их.
     *
     * Объявите указатели соответствующих типов и проинициализируйте их
     * адресами заданных объектов. 
     *
     * Выполняя задание, с помощью отладчика посмотрите, какие значения будут
     * присвоены переменным-указателям и на что эти указатели "указывают".
     */

    {
        int IntPr = 123;
        char CharPr = 'A';
        float FLoatPr = 3.14;

        int *IntYk = &IntPr;
        char *CharYk = &CharPr;
        float *FLoatYk = &FLoatPr;
    }

    /**
     * Задание 4.2.
     *
     * Объявите указатель на тип char и проинициализируйте его адресом
     * строкового литерала. Присвойте переменной типа char значение любого
     * элемента строки.
     *
     * Проверьте - возможно ли присвоить какое-либо значение по адресу,
     * задаваемому указателем?
     */

    {
        const char *CharStr = "eto stroka";
        char ch = CharStr[1]; //t
        //CharStr[1] = "T"; //ошибка, т.к. строковый литерал неизменяем 
    }

    /**
     * Задание 5. Арифметика указателей. Операция разыменования указателя.
     *
     * Выполните следующий код по строчкам в отладчике, проследите за
     * изменением значений указателей и значений объектов, на которые они
     * указывают. 
     *
     * Интерпретируте наблюдаемые результаты.
     */
    {
        int nAr[3] = {1,3};
        int* pn = &nAr[0];
        (*pn)++;   //nAr[0] увеличится на 1   1->2 
        pn++;   //увеличиваем значение указателя на 1 (сам указатель увеличится на размер int (например:0x7fffffffdcf4 -> 0x7fffffffdcf8)) -> теперь указатель указывает на 2 элемент массива

        char cAr[] = {'A', 'B', 'C', 'D'};
        char *pc = &cAr[0];
        (*pc) = (*pc) + 5;  //"ABCD" -> "FBCD" меняем 1 элемент на "1элемент +5" ("A" +5 = "F")
        pc = pc + 3;  //сдвиг на 4 элемент "FBCD" -> "D"
    
        double dAr[3]={1.0,2.0};
        double *pd1 = &dAr[0];
        double *pd2 = pd1; // pd2 также указывает на 1 элемент массива
        (*pd2) += 2; // 1эл увеличивается на 2   1->3
        pd2 += 2; // сдвиг на 3 элемент (в данном случае 0)

        /** Объясните результат выполнения операции вычитания двух указателей */
        pd1 = &dAr[0]; //на 3
        pd2 = &dAr[1]; // на 2
        int nNumber = pd2 - pd1; //1 разность равна количеству элементов между этими указателями (т.к. соседние то 1)

        /** 
         * Сравните указатели pd2 и pd1 и с помощью cout выведите результаты
         * сравнения.
         */
        if (pd1 == pd2){std::cout<<"pd1 = pd2" << std::endl;} //указывают ли на 1 и тот же элемент
        else if (pd1 > pd2){std::cout<<"pd1 > pd2" << std::endl;} // находится ли pd1 позже pd2
        else {std::cout<<"pd1 < pd2" << std::endl;} // находится ли pd1 раньше pd2  True
    }
/*
    /**
     * Задание 6. Явное преобразование указателя. 
     *
     * Иногда возникает необходимость одни и те же данные интерпретировать
     * по-разному, например, целое можно представить как совокупность четырех
     * байтов и работать с каждым байтом по отдельности. Для этого нужно иметь
     * возможность "указывать" как на целое, так и на байт. 
     * 
     * Следовательно, возникает необходимость явного преобразования указателя. 
     * 
     * Подсказка: для правильной интерпретации этого задания воспользуйтесь
     * возможностями отладчика представлять данные в интересующем Вас виде (в
     * данном случае - в шестнадцатеричном) - для этого можно использовать
     * команду print (p) с указанием шестнадцетиричного формата: `p/x`.
     */

    {
        unsigned int nObject = 0x55667788;
        unsigned int* pnObject = &nObject;
        unsigned char* pucObject;
        char cc;

        /**
         * Раскомментировав следующую строчку кода, обратите внимание на
         * сообщение компилятора - он не считает преобразование "легальным"
         * (безопасным)
         */
        //pucObject = static_cast<unsigned char*>(pnObject); //компилятор проверяет корректность приведения

        /**
         * А такое преобразование - целиком на совести программиста. Его можно
         * применять, только четко представляя себе результат преобразования.
         */
        pucObject = reinterpret_cast<unsigned char*>(pnObject); //компилятор НЕ проверяет корректность приведения

        /** Проследите за значениями переменной `cc`. Объясните результаты. */ //little-endian формат
        cc = pucObject[0]; // -120 0x88 -> 1000 1000
        cc = pucObject[1]; // 119  0x77 -> 0111 0111
        cc = pucObject[2]; // 102  0x66 -> 0110 0110
        cc = pucObject[3]; // 85   0x55 -> 0101 0101

        /**
         * Выполните следующие строки, наблюдая за значениями следующих
         * выражений: `cc`, `p` и `*p`.
         *
         * Зафиксируйте и интерпретируйте результаты.
         */
        cc = *(pucObject++); // 0x88 (сдвигает на 1 -> присваивает 0x88)
        cc = (*pucObject)++; // 119 (присваивает 0x77 -> увеличивает значение по адресу *pucObject на 1; *pucObject становится 0x78, а cc будет равно 119)

        cc = ++*(pucObject); // 121 (разыменовывает -> увеличивает значение по адресу *pucObject на 1 -> присваивает 0x79)
        cc = *(++pucObject); // 102 (сдвигает адрес на 1 (0x66) -> присваивает 0x66)
    }

    /**
     * Задание 7. Void-указатель. 
     */
    

    /**
     * Задание 7.1.
     * 
     * Выполняя задание, посмотрите - какие значения присваиваются
     * void-указателю.
     *
     * Обратите внимание: средствами отладчика вы не можете посмотреть
     * значения, на которые "указывает" void-указатель.
     */
    {
        void *pVoid;
        int nObject3 = 5;
        char cObject3 = 'A';
        int *pInt = &nObject3;  
        pVoid = &nObject3; //такое же как ит в *pInt
        pVoid = &cObject3;
        pVoid = pInt; //такое же как ит в *pInt

        /** 
         * Прежде, чем раскомментировать следующую строчку, вспомните: что
         * нужно сделать, чтобы выражение стало корректным?
         */
        pInt = static_cast<int*>(pVoid); //void не имеет информации о типе данных, на который указывает, поэтому не может быть напрямую разыменован

    }
    
    /**
     * Что нужно сделать для того, чтобы следующее закомментированное выражение
     * стало корректным?
     *
     * В закоментированной строке необходимо объявить void-указатель.
     */
    {
        const int n = 1;
        //... = &n;
        const void *uk = &n; //константные данные, изменяемый указатель
    }

    /**
     * Задание 7.2.
     *
     * При выполнении следующего фрагмента посмотрите, какие неприятности могут
     * Вас ожидать при явном приведении типа void-указателя, который в момент
     * времени (1) указывает на double, к типу указателя на int (2).
     */

    {
        double dObject3 = 33.33;
        void* pVoid = &dObject3;  //(1)

        int nTmp = *(static_cast<int*>(pVoid) ); //(2)    = 1889785610 - это int интерпретация первых 4 байт double(8байт) числа 33.33

    }

    /**
     * Задание 8. Модификатор const. 
     */

    /**
     * Задание 8.1.
     *
     * В каждом из заданий объявите указатель требуемого вида. 
     *
     * Посредством каждого указателя попробуйте: 
     *
     * - получить значение по адресу;
     * - записать новое значение по адресу;
     * - модифицировать указатель.
     */

    /**
     * Задание 8.1.1. Указатель является константой. 
     */

    {
        int i = 98, k = 0;
        int* const uk = &i; //изменяемые данные, константный указатель
        //uk = &k; //read-only variable ‘uk’
        //uk++; //read-only variable ‘uk’
        *uk = 45;
    }
    
    /**
     * Задание 8.1.2. Указываемое значение является константой. 
     */

    {
        int i = 98, k = 0;
        const int* uk = &i;
        //*uk = 20; // read-only location ‘* uk’
        uk = &k;
        uk++;
    }

    /**
     * Задание 8.1.3. И указатель, и указываемое значение являются константами. 
     */

    {
        int i = 98, k = 0;
        const int* const uk = &i;
        //uk = &k; //read-only variable
        //*uk = 20; //read-only location
    }

    /**
     * Задание 8.2. Указатель на переменную, объявленную с ключевым словом
     * const. 
     *
     * Объявите указатель и проинициализируйте его выражением - `&nN`.
     */

    {
        const int nN = 1;
        const int* uk = &nN; //без const ошибка
    }

    /**
     * Задание 9. Указатели на указатели.
     */

    {
        int n = 1;

        /** 
         * Объявите указатель pn и проинициализируйте его так, чтобы он
         * "указывал" на n. 
         */
        int *pn = &n;
        /** 
         * Объявите указатель ppn и проинициализируйте его так, чтобы он
         * "указывал" на pn. 
         */
        int **ppn = &pn;
        /** 
         * Объявите указатель pppn и проинициализируйте его так, чтобы он
         * "указывал" на ppn. 
         */
        int ***pppn = &ppn;
        /** 
         * С помощью указателей pn, ppn и pppn получите значение объекта n и
         * присвойте его m.
         */

        int m;
        m = *pn;
        m = **ppn;
        m = ***pppn;
    }

    return 0;
}
