/**
 * Лабораторная работа №2. Массивы объектов, простое наследование, виртуальные
 * функции, применение наследования.
 *
 * В этой работе и далее предполагается, что вы будете использовать классы,
 * написанные в прошлых работах, и дополнять их по необходимости. Эти классы
 * будут называться по имени без дополнительных указаний, что их надо взять из
 * прошлой работы.
 *
 * Предполагается, что новый классы будут созданы по аналогии с предыдущими
 * работами в отдельных файлах, которые будут включены в сборку.
 *
 * При работе с классами - в учебных целях - нельзя пользоваться контейнерами
 * стандартной библиотеки и нужно следовать принципам инкапсуляции.
 */
#include<iostream>
#include"../../lab1/src/my_string.hpp"
#include"basefile.hpp"
#include<cstring>

int main(){
    /**
     * Задание 1. Массивы объектов класса.
     */

    /**
     * Задание 1.1. Массив объектов.
     *
     * Объявите и проинициализируйте массив ar из объектов типа MyString.
     * Выведите элементы массива на консоль.
     */

    
    std::cout<< "Задание 1.1\n";
    //MyString ar[5] = {MyString("Lenin"), MyString("Marks"), MyString("Engels")};
    MyString ar[5] = {"Lenin", "Marks", "Engels"}; 
    for(int i=0; i<5; i++){
        ar[i].print();
    }
    

    /**
     * Замените размер массива с 3 на 5, не меняя список инициализаторов.
     *
     * Чем были инициализированы последние 2 элемента? Какие значения могут
     * стоять в списке инициализаторов - в вашем случае и в общем случае?
     */
    //для двух последних эл-тов вызовется конструктор по умолчанию, в нашем случае он создает пустую строку
    /**
     * Задание 1.2. Массив указателей на объекты.
     *
     * Объявите и проинициализируйте массив arPtr из трех указателей на объекты
     * типа MyString. Выведите элементы массива на консоль.
     */

    
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<< "Задание 1.2\n";
    MyString* arPtr[3] = {&ar[0], &ar[1], &ar[2]};
    for(int i=0; i<3; i++){
        std::cout<< arPtr[i]<<std::endl;
    }
    
    
    /**
     * Задание 2. Простое наследование. Аргументы конструктора, передаваемые в
     * базовый класс.
     */

    /**
     * Задание 2.1. Базовый класс.
     *
     * Создайте класс BaseFile, который будет реализовывать работу с файлами с
     * помощью стандартных средств C (cstdio).
     *
     * Класс должен иметь 3 конструктора: первый - конструктор по умолчанию,
     * второй должен принимать путь к файлу и параметры для открытия (как в
     * fopen), третий должен принимать готовый указатель FILE*.
     *
     * Считается, что этот класс *обладает* своим ресурсом - открытым файлом.
     * Что должно быть в дестукторе этого класса? //закрытие файла, если он был открыт
     *
     * Добавьте следующие методы:
     * - bool is_open() - возвращает true, если файл успешно открыт;
     * - bool can_read() - возвращает true, если из файла можно считать данные;
     * - bool can_write() - возвращает true, если в файл можно записать данные;
     * - size_t write_raw(const void *buf, size_t n_bytes) - записывает
     *   указанное количество байт в файл и возвращает количество байт, которое
     *   удалось записать;
     * - size_t read_raw(void *buf, size_t max_bytes) - читает доступные данные
     *   в буфер, но не более указанного количества и возвращает количество
     *   байт, которое удалось считать;
     * - long tell() - возвращает текущий сдвиг файла (см. функцию ftell);
     * - bool seek(long offset) - устанавливает сдвиг файла (см. функцию fseek)
     *   и возвращает true, если операция успешна.
     *
     * Добавьте также методы `read` и `write`, которые в этом классе будут
     * делать буквально то же, что `read_raw` и `write_raw`, они понадобятся нам
     * позже.
     *
     * Проверьте работу этого класса.
     */
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<< "Задание 2.1\n";

    FILE* File = fopen("tests/test2_2.1.txt", "a"); //a - добавляет в файл а не перезаписывает с нуля
    BaseFile file1, file2("tests/test1_2.1.txt", "r"), file3(File);
    
    std::cout<<"Открыт ли первый файл: "<< file1.is_open() <<std::endl;
    std::cout<<"Открыт ли второй файл: "<< file2.is_open() <<std::endl;
    std::cout<<"Открыт ли второй на чтение: "<< file2.can_read() <<std::endl;
    std::cout<<"Открыт ли второй на запись: "<< file2.can_write() <<std::endl;
    std::cout<<"Открыт ли третий на запись: "<< file3.can_write() <<std::endl;

    const char* text2_1_1 = "capybara";
    char text2_1_2[60];
    size_t S1 = file3.write_raw(text2_1_1, strlen(text2_1_1));
    size_t S2 = file2.read_raw(text2_1_2, 60);
    printf("%s\n", text2_1_2);
    std::cout<<S1<<" "<< S2<<std::endl;

    std::cout<<"Текущая позиция курсора в 3 файле: "<< file3.tell() <<std::endl;
    std::cout<< file2.seek(-1000) << " " << file2.seek(3) <<std::endl; //первый сдвиг неуспешный, а второй - успешный

    fclose(File);
    /**
     * Задание 2.2. Производные классы.
     *
     * Производный класс *наследуется* от базового класса и каким-то образом
     * расширяет его функциональность, при это все еще умея все, что умеет
     * базовый класс.
     *
     * Реализуйте следующие производные классы от класса BaseFile. Производные
     * классы нужно унаследовать так, чтобы пользователю были все еще доступны
     * методы базового класса. Каким образом нужно унаследовать класс для этого?
     * Как еще можно унаследовать класс?
     *
     * Производные классы могут располагаться в том же файле, где и базовый
     * класс.
     *
     * В производных классах добавьте необходимые конструкторы, которые будут
     * вызывать конструктор базового класса.
     *
     * Проверьте работу производных классов.
     */
    
    /*
    В нашем случае нужно воспользоваться public наследованием, чтобы иметь доступ ко всем public и protected методам и полям BaseFile
    Помимио public наследования также существует protected и private наследование
    protected наследование преобразует public методы в protected
    private наследование преобразует и public, и protected методы в private
    */

    /**
     * Задание 2.2.1. Base32 кодировщик/декодировщик.
     *
     * Создайте производный класс Base32File, который будет проводить при
     * записи кодировку-декодировку данных, по алгоритму, который вы
     * реализовали в лабораторной работе №4 прошлого семестра.
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с декодировкой и запись в файл с кодировкой соответственно.
     *
     * Добавьте возможность пользователю передать в конструктор таблицу
     * кодировки, по умолчанию используется таблица "A..Z1..6".
     */
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<< "Задание 2.2.1\n";

    const char* table = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456";
    Base32File file4("tests/test1_2.2.1.txt", "w", table), file5("tests/test2_2.2.1.txt", "r", table);
    const char* text_for_write = "Capybara";
    char text_for_read[14];
    file4.write(text_for_write, strlen(text_for_write));
    file5.read(text_for_read, 21);
    printf("%s\n", text_for_read);

    /**
     * Задание 2.2.2. RLE-сжатие.
     *
     * Создайте производный класс RleFile, который будет проводить побайтовое
     * сжатие при помощи алгоримта RLE (для простоты можно реализовать
     * неэффективный алгоритм, где последовательности без повторений отдельно
     * не кодируются).
     *
     * Переопределите методы `read` и `write`, которые будут проводить чтение из
     * файла с извлечением сжатой информации и запись в файл со сжатием
     * соответственно.
     *
     * Проверьте сжатие/извлечение на примере какого-нибудь ASCII-арта,
     * например, котенка из лабораторной №3 прошлого семестра. Посмотрите,
     * получилось ли добиться уменьшения размера хранимых данных.
     */
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<< "Задание 2.2.2\nсм. арты\n";

    RleFile file6("tests/ART_RLE.txt", "w"), file7("tests/ART_RLE.txt", "r"), file8("tests/ART_decoded_from_RLE.txt", "w"), art("tests/ART_original.txt", "r");
    char ART_ORIGINAL[24308];

    size_t len_origin_art = art.read_raw(ART_ORIGINAL, 24308);
    size_t len_rle_art = file6.write(ART_ORIGINAL, len_origin_art);
    file6.close(); //закрываем файл, чтобы нормально считалось

    char* decoded_ART = new char[len_origin_art];
    size_t len_decoded_rle_art = file7.read(decoded_ART, len_rle_art);

    file8.write_raw(decoded_ART, len_decoded_rle_art);

    delete [] decoded_ART;
    /**
     * Задание 2.3. Конструкторы и деструкторы базового и производного классов.
     *
     * Установите отладочную печать в конструкторах и деструкторах каждого
     * класса из этого задания. Создайте локальные объекты производных классов,
     * отметьте, в каком порядке вызываются конструкторы и деструкторы при
     * инициализации и деинициализации этих классов.
     */

    /**
     * Задание 2.4. Ранее связывание.
     *
     * На основе данной заготовки напишите код, который запишет в файл строковое
     * представление целого числа. Вы должны использовать один и тот же код для
     * всех файлов, меняя только имя объекта (bf / b32f / rf), в который идет
     * запись.
     */

    /* {
        BaseFile bf(...);
        Base32File b32f(...);
        RleFile rf(...);

        int n = 123456;
        if (n < 0) { bf.write(...); }
        while (n > 0) {
            bf.write(...);
            // ...
        }

        n = 123456;
        if (n < 0) { b32f.write(...); }
        while (n > 0) {
            b32f.write(...);
            // ...
        }

        n = 123456;
        if (n < 0) { rf.write(...); }
        while (n > 0) {
            rf.write(...);
            // ...
        }
    } */
   
    {
        BaseFile bf("tests/numbers1.txt", "w");
        Base32File b32f("tests/numbers2.txt", "w");
        RleFile rf("tests/numbers3.txt", "w");

        int n = -123456, poz = 1;
        while(poz*10 < abs(n)){poz*=10;}
        char ch[1];
        if (n < 0) { bf.write("-", 1); n = -n;}
        while (n > 0) {
            ch[0] = static_cast<char>('0' + n/poz );
            bf.write(static_cast<const char*>(ch), 1);
            n%=poz;
            poz/=10;
        }

        n = -123456, poz = 1;
        while(poz*10 < abs(n)){poz*=10;}
        if (n < 0) { b32f.write("-", 1); n = -n;}
        while (n > 0) {
            ch[0] = static_cast<char>('0' + n/poz );
            b32f.write(static_cast<const char*>(ch), 1);
            n%=poz;
            poz/=10;
        }

        n = -123456, poz = 1;
        while(poz*10 < abs(n)){poz*=10;}
        if (n < 0) { rf.write("-", 1); n = -n;}
        while (n > 0) {
            ch[0] = static_cast<char>('0' + n/poz );
            rf.write(static_cast<const char*>(ch), 1);
            n%=poz;
            poz/=10;
        }
    }

    /**
     * Задание 2.5. Передача объекта по ссылке / указателю.
     *
     * Прошлое задание выглядит странновато - зачем повторять код три раза?
     * Хорошо бы сделать функцию, которая примет объект файла и число, и
     * выполнит эти действия.
     *
     * Реализуйте функцию `write_int(BaseFile &file, int n)`, которая будет
     * принимать ссылку на файл и число, которое нужно будет напечатать.
     *
     * Принцип наследования предписывает, что везде, где можно использовать
     * базовый класс, можно использовать производный класс. Проверьте, можно
     * ли вызвать функцию, передав в нее объект класса Base32File и RleFile.
     *
     * Имеет ли вызов этой функции для производного класса тот же результат,
     * что и код, который вы написали выше? Почему?
     */
    {
        BaseFile bf("tests/numbers4.txt", "w");
        RleFile rf("tests/numbers5.txt", "w");
        int n = -789;
        write_int(bf, n);
        write_int(rf, n);
        //для rf запишется то же что и для bf
        //если метод в базовом классе не виртуальный, то при передаче по ссылке/указателю компилятор выполняет
        //раннее связывание (на этапе компиляции) и вызывает версию метода из базового класса.
    }

    /**
     * Задание 2.6. Виртуальные функции, позднее связывание.
     *
     * Объявите функции read и write в базовом классе *виртуальными*. Что это
     * означает? Как изменился размер объектов классов BaseFile, Base32File и
     * RleFile? Почему?
     *
     * Как изменилось поведение при вызове функции `write_int` для производных
     * классов? Почему?
     */
    {
        BaseFile bf("tests/numbers4.txt", "w");
        RleFile rf("tests/numbers5.txt", "w");
        int n = -789;
        write_int(bf, n);
        write_int(rf, n);
        //для rf и bf записываются разные значения
        //теперь метод в базовом классе виртуальный (его вызов определяется во время выполнения, а не компиляции, исходя из реального типа объекта), 
        //при передаче по ссылке/указателю выполняются именно переопределенные(override) методы
        //объекты стали большего размера, из-за добавления в каждый vptr (указателя на таблицу виртуальных функций)
    }

    /**
     * Задание 2.7. Виртуальный деструктор.
     *
     * В следующем блоке кода добавьте удаление динамической памяти.
     *
     * Какой деструктор при этом вызывается? Почему? К каким проблемам это может
     * привести?
     *
     * Исправьте эту ситуацию.
     */

    /* {
        BaseFile *files[] = { 
            new BaseFile(...), 
            new RleFile(...), 
            new Base32File(...), 
        };

        for (int i = 0; i < 3; ++i) {
            files[i]->write("Hello!", 6);
        }
    } */

    {
        BaseFile *files[] = { 
            new BaseFile("tests/hello1.txt", "w"),
            new Base32File("tests/hello2.txt", "w"), 
            new RleFile("tests/hello3.txt", "w"),
        };

        for (int i = 0; i < 3; ++i) {
            files[i]->write("Hello!", 6);
            delete files[i]; //вызовется только ~BaseFile(), а деструкторы Base32File и RleFile не вызовутся
            //для исправления - сделать virtual ~BaseFile()
        }
    }
     

    /**
     * Задание 2.8. Массив объектов производных классов.
     *
     * Раскомментируйте следующий блок и объясните, почему:
     * а) не возникает ошибок при компиляции; //вызываются деструкторы Basefile, которые соответсвтуют объектам массива
     * б) возникают ошибки при выполнении. //вызываются ТОЛЬКО деструкторы Basefile, ~Base32File() не будет вызван; Base32File - утечка памяти
     *
     * Этот пример показывает очень плохую практику, которая приводит к ошибкам;
     * для создания массива объектов производного класса и используйте массив
     * указателей на базовый класс, как это было сделано выше. Реализуйте ту же
     * логику, используя массив указателей на объекты базового класса.
     */
   /*{
        BaseFile *base_files = new BaseFile[2] { BaseFile("tests/hello4_1.txt", "w"), BaseFile("tests/hello4_2.txt", "w") };
        BaseFile *b32_files = new Base32File[2] { Base32File("tests/hello5_1.txt", "w"), Base32File("tests/hello5_2.txt", "w") };
        for (int i = 0; i < 2; ++i) {
            base_files[i].write("Hello!", 6);
            b32_files[i].write("Hello!", 6);
        }
        delete [] base_files;
        delete [] b32_files;
    }*/
    {
        BaseFile **base_files = new BaseFile*[2] {new BaseFile("tests/hello4_1.txt", "w"), new BaseFile("tests/hello4_2.txt", "w") };
        BaseFile **b32_files = new BaseFile*[2] {new Base32File("tests/hello5_1.txt", "w"), new Base32File("tests/hello5_2.txt", "w") };
        for (int i = 0; i < 2; ++i) {
            base_files[i]->write("Hello!", 6);
            b32_files[i]->write("Hello!", 6);
            delete base_files[i];
            delete b32_files[i];
        }
        delete [] base_files;
        delete [] b32_files;
    }

    /**
     * Задание 3. Чисто виртуальные функции. Интерфейсы. Композиция классов.
     *
     * Наследование позволяет довольно просто переиспользовать данные и логику
     * других классов, однако зачастую этот механизм недостаточно гибкий для
     * полноценного переиспользования.
     *
     * Например, сможем ли мы в получившейся иерархии классов реализовать
     * одновременно и кодирование в base32, и сжатие при записи данных в файл?
     * Или сможем ли мы вместо записи в файл на диске делать запись в строковый
     * буфер в памяти?
     *
     * При дальнейшем рассмотрении окажется, что при помощи наследования мы
     * крепко *связали* логику преобразования данных с записью в конкретный
     * файл. Далее мы рассмотрим один из способов разделения такой логики.
     */

    /**
     * Задание 3.1. Абстрактный базовый класс, чисто виртуальные функции.
     *
     * Первая проблема в нашей реализации - все наследники BaseFile будут всегда
     * обязаны непосредственно писать в файл на диске. Чтобы избавиться от этой
     * необходимости, стоит сделать базовый класс *абстрактным* в том смысле,
     * что у него не будет полей связанных с конкретным способом писать в файл.
     *
     * Создайте класс `IFile`, в котором не будет полей, но будут методы
     * `can_read`, `can_write`, `read` и `write` с такими же сигнатурами, как и
     * классе `BaseFile`. Что именно будут делать эти методы? Класс `IFile` не
     * может знать, поскольку логику этих методов будут определять наследники.
     * В этом классе эти методы не имеют реализации, и они должны быть объявлены
     * *чисто виртуальными*.
     *
     *
     * Получается, что в классе `IFile` есть только чисто виртуальные методы, и
     * единственная цель такого класса - определять, что должны уметь делать его
     * наследники. Совокупность действий, которые можно сделать с объектом,
     * называется его *интерфейсом*, и такие классы тоже часто называются
     * интерфейсами, отсюда берется приставка "I" в имени класса.
     *
     * Унаследуйте класс `BaseFile` от класса `IFile` и измените функцию
     * `write_int`, чтобы она работала с произвольным наследником `IFile`.
     *
     * Убедитесь, что в программе выше ничего не сломалось.
     */

    /* Какие ограничения накладывает на класс наличие чисто виртуального метода?
    1)Нельзя создать объект этого класса (только указатели/ссылки)
    2)Должен быть унаследован конкретными классами
    3)Требует реализации всех чисто виртуальных методов в производных классах
    */

    /**
     * Задание 3.2. Композиция вместо наследования.
     *
     * Реализуйте классы `Base32File2` и `RleFile2`, которые будут унаследованы
     * от класса `IFile` и в конструкторе будут получать другой объект `IFile`,
     * чьи функции они будут использовать вместо функций базового класса.
     *
     * Объекты получают объект `IFile` в виде указателя на динамически
     * выделенную память, и они ответственны за ее очищение.
     *
     * Использование объектом другого объекта в качестве поля называется
     * *композицией*.
     *
     * Проверьте, что используемые ниже объекты работают так же, как объекты
     * классов `Base32File` и `RleFile`.
     */

    {
        Base32File2 b32f(new BaseFile("tests/3_2test1.txt", "w")); 
        RleFile2 rf(new Base32File("tests/3_2test2.txt", "w"));
        write_int(b32f, 123456);
        write_int(rf, 123456);
    }

    /**
     * Задание 3.3. Больше композиции!
     *
     * Не реализовывая больше никаких классов, соорудите объект-наследник IFile,
     * который будет при вызове метода `write` два раза кодировать в base32,
     * после чего применять сжатие RLE и только после этого писать в файл.
     */

    {
        /*Enigma enigma1(new BaseFile("tests/enigma_test_1.txt", "w")); //закодировали
        const char* text_for_enigma = "Capybara";
        size_t t1 = enigma1.write(text_for_enigma, strlen(text_for_enigma));
        enigma1.close();

        Enigma enigma2(new BaseFile("tests/enigma_test_1.txt", "r")); //декодировали
        char* decoded_text_enigma = new char[strlen(text_for_enigma)];
        size_t t2 = enigma2.read(decoded_text_enigma, t1);

        FILE* file_enigma = fopen("tests/enigma_test_2.txt", "w"); //записали декодировку
        fwrite(decoded_text_enigma, 1, t2, file_enigma);
        fclose(file_enigma);

        delete [] decoded_text_enigma;*/

        Base32File2 enigma(new Base32File2(new RleFile2( new BaseFile("tests/enigma_test_1.txt", "w"))));
        write_int(enigma, 123456);
    }

    return 0;
}
